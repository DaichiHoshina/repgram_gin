// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/presentation_repository.go

// Package mock_usecase is a generated GoMock package.
package mock

import (
	reflect "reflect"

	domain "github.com/DaichiHoshina/repgram_gin/backend/domain"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
)

// MockPresentationRepository is a mock of PresentationRepository interface.
type MockPresentationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPresentationRepositoryMockRecorder
}

// MockPresentationRepositoryMockRecorder is the mock recorder for MockPresentationRepository.
type MockPresentationRepositoryMockRecorder struct {
	mock *MockPresentationRepository
}

// NewMockPresentationRepository creates a new mock instance.
func NewMockPresentationRepository(ctrl *gomock.Controller) *MockPresentationRepository {
	mock := &MockPresentationRepository{ctrl: ctrl}
	mock.recorder = &MockPresentationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPresentationRepository) EXPECT() *MockPresentationRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPresentationRepository) Create(db *gorm.DB, postPresentation domain.Presentation) (domain.Presentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", db, postPresentation)
	ret0, _ := ret[0].(domain.Presentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPresentationRepositoryMockRecorder) Create(db, postPresentation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPresentationRepository)(nil).Create), db, postPresentation)
}

// Delete mocks base method.
func (m *MockPresentationRepository) Delete(db *gorm.DB, id int) (domain.Presentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", db, id)
	ret0, _ := ret[0].(domain.Presentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPresentationRepositoryMockRecorder) Delete(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPresentationRepository)(nil).Delete), db, id)
}

// FindAll mocks base method.
func (m *MockPresentationRepository) FindAll(db *gorm.DB, post domain.Paginate, query string) (domain.Presentations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", db, post, query)
	ret0, _ := ret[0].(domain.Presentations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPresentationRepositoryMockRecorder) FindAll(db, post, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPresentationRepository)(nil).FindAll), db, post, query)
}

// FindByID mocks base method.
func (m *MockPresentationRepository) FindByID(db *gorm.DB, id int) (domain.Presentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", db, id)
	ret0, _ := ret[0].(domain.Presentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockPresentationRepositoryMockRecorder) FindByID(db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPresentationRepository)(nil).FindByID), db, id)
}

// Update mocks base method.
func (m *MockPresentationRepository) Update(db *gorm.DB, postPresentation, modelPresentation domain.Presentation) (domain.Presentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", db, postPresentation, modelPresentation)
	ret0, _ := ret[0].(domain.Presentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPresentationRepositoryMockRecorder) Update(db, postPresentation, modelPresentation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPresentationRepository)(nil).Update), db, postPresentation, modelPresentation)
}
